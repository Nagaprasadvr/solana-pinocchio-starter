/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeStateInstruction,
  type ParsedUpdateStateInstruction,
} from '../instructions';

export const SOLANA_PINOCCHIO_STARTER_PROGRAM_ADDRESS =
  'ENrRns55VechXJiq4bMbdx7idzQh7tvaEJoYeWxRNe7Y' as Address<'ENrRns55VechXJiq4bMbdx7idzQh7tvaEJoYeWxRNe7Y'>;

export enum SolanaPinocchioStarterAccount {
  MyState,
}

export enum SolanaPinocchioStarterInstruction {
  InitializeState,
  UpdateState,
}

export function identifySolanaPinocchioStarterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolanaPinocchioStarterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return SolanaPinocchioStarterInstruction.InitializeState;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return SolanaPinocchioStarterInstruction.UpdateState;
  }
  throw new Error(
    'The provided instruction could not be identified as a solanaPinocchioStarter instruction.'
  );
}

export type ParsedSolanaPinocchioStarterInstruction<
  TProgram extends string = 'ENrRns55VechXJiq4bMbdx7idzQh7tvaEJoYeWxRNe7Y',
> =
  | ({
      instructionType: SolanaPinocchioStarterInstruction.InitializeState;
    } & ParsedInitializeStateInstruction<TProgram>)
  | ({
      instructionType: SolanaPinocchioStarterInstruction.UpdateState;
    } & ParsedUpdateStateInstruction<TProgram>);
