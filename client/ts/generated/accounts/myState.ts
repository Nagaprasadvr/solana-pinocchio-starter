/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import {
  getStateDecoder,
  getStateEncoder,
  type State,
  type StateArgs,
} from '../types';

export type MyState = {
  isInitialized: number;
  owner: Address;
  state: State;
  data: Array<number>;
  updateCount: number;
  bump: number;
};

export type MyStateArgs = {
  isInitialized: number;
  owner: Address;
  state: StateArgs;
  data: Array<number>;
  updateCount: number;
  bump: number;
};

export function getMyStateEncoder(): FixedSizeEncoder<MyStateArgs> {
  return getStructEncoder([
    ['isInitialized', getU8Encoder()],
    ['owner', getAddressEncoder()],
    ['state', getStateEncoder()],
    ['data', getArrayEncoder(getU8Encoder(), { size: 32 })],
    ['updateCount', getU32Encoder()],
    ['bump', getU8Encoder()],
  ]);
}

export function getMyStateDecoder(): FixedSizeDecoder<MyState> {
  return getStructDecoder([
    ['isInitialized', getU8Decoder()],
    ['owner', getAddressDecoder()],
    ['state', getStateDecoder()],
    ['data', getArrayDecoder(getU8Decoder(), { size: 32 })],
    ['updateCount', getU32Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getMyStateCodec(): FixedSizeCodec<MyStateArgs, MyState> {
  return combineCodec(getMyStateEncoder(), getMyStateDecoder());
}

export function decodeMyState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MyState, TAddress>;
export function decodeMyState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MyState, TAddress>;
export function decodeMyState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MyState, TAddress> | MaybeAccount<MyState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMyStateDecoder()
  );
}

export async function fetchMyState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MyState, TAddress>> {
  const maybeAccount = await fetchMaybeMyState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMyState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MyState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMyState(maybeAccount);
}

export async function fetchAllMyState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MyState>[]> {
  const maybeAccounts = await fetchAllMaybeMyState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMyState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MyState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMyState(maybeAccount));
}
